name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and validate code
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install HTML/CSS/JS linters
        run: |
          npm install -g htmlhint
          npm install -g stylelint
          npm install -g eslint

      - name: Lint HTML
        run: htmlhint index.html

      - name: Lint CSS
        run: stylelint styles.css --fix

      - name: Lint JavaScript
        run: eslint script.js --fix

      - name: Validate Dockerfile
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test Docker image
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8080 || exit 1
          docker stop test-container

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application
        run: |
          docker-compose up -d
          sleep 15

      - name: Run integration tests
        run: |
          # Test if the website is accessible
          curl -f http://localhost:80 || exit 1
          
          # Test if main page loads
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80)
          if [ "$response" != "200" ]; then
            echo "Expected HTTP 200, got $response"
            exit 1
          fi
          
          # Test if CSS and JS files are accessible
          curl -f http://localhost:80/styles.css || exit 1
          curl -f http://localhost:80/script.js || exit 1

      - name: Stop application
        if: always()
        run: docker-compose down

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: Deploy to staging server, cloud platform, etc.

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: Deploy to production server, cloud platform, etc.

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start application
        run: |
          docker-compose up -d
          sleep 15

      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=./.lighthouserc.json

      - name: Stop application
        if: always()
        run: docker-compose down

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add your notification logic here (Slack, email, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add your notification logic here (Slack, email, etc.)
